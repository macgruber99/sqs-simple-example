version: 0.2

phases:
  install:
      runtime-versions:
        python: 3.13
      commands:
        # install Poetry
        - |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="/root/.local/bin:$PATH"
        - poetry --version
        # install Terraform
        - |
          TF_VER=$(<terraform/.terraform-version)
          cd /tmp
          curl -fsSL https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          chmod +x terraform
          mv terraform /usr/local/bin/
          rm terraform.zip
          cd $CODEBUILD_SRC_DIR
        - terraform --version
        # install Go Task
        - pip install go-task-bin

  pre_build:
    commands:
      - # install Python packages via Poetry
      - |
        echo "Installing Lambda dependencies..."
        for lambda_dir in `find lambdas/ -type d -maxdepth 1 -print | tail -n +2`
        do
          # sounds like 'poetry install' activates the venv so no need to have that step in the command
          cd ${CODEBUILD_SRC_DIR}/${lambda_dir} && eval $(poetry env activate) && poetry install
        done

  build:
    commands:
      - cd ${CODEBUILD_SRC_DIR}
      # - |
      #   echo "Executing Lambda function unit tests..."
      #   for lambda_dir in `find lambdas/ -type d -maxdepth 1 -print | tail -n +2`
      #   do
      #     cd ${CODEBUILD_SRC_DIR}/${lambda_dir} && task unit-test
      #   done
      # create packages for Lambda functions
      - cd ${CODEBUILD_SRC_DIR}
      - poetry self add poetry-plugin-lambda-build
      - |
        echo "Creating packages for Lambda functions..."
        for lambda_dir in `find lambdas/ -type d -maxdepth 1 -print | tail -n +2`
        do
          cd ${CODEBUILD_SRC_DIR}/${lambda_dir} && task build
        done
      - task deploy
